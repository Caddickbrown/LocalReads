name: release

on:
  # create a release when you push a version tag like v1.2.3
  push:
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v4
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          body: |
            See the assets below to download and install.
            
            ## Changes
            - Built with Tauri v2
            - Cross-platform support
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-release:
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS: build separate binaries for Apple Silicon + Intel
          - platform: macos-latest
            target: aarch64-apple-darwin
            args: "--target aarch64-apple-darwin"
          - platform: macos-latest
            target: x86_64-apple-darwin
            args: "--target x86_64-apple-darwin"
          # Linux runner for AppImage/.deb (see notes about deps & glibc)
          - platform: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            args: ""
          # Windows .exe / NSIS installer
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
            args: ""

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: npm

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          # macOS needs both targets if you build a universal later
          targets: ${{ matrix.target }}

      - name: Install required Rust targets
        run: |
          rustup target add ${{ matrix.target }}
          rustup target list --installed

      - name: Cache Rust build artifacts
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri
          cache-on-failure: true

      - name: Install Linux dependencies
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          # Tauri v2 uses webkit2gtk 4.1 and may need additional packages
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            librsvg2-dev \
            patchelf \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            libssl-dev \
            libc6-dev \
            libx11-dev \
            libxcb1-dev \
            libxrandr-dev \
            libxss-dev \
            libasound2-dev \
            libpulse-dev \
            libdbus-1-dev \
            libudev-dev \
            libevdev-dev \
            libinput-dev \
            libxkbcommon-dev \
            libxcb-render0-dev \
            libxcb-shape0-dev \
            libxcb-xfixes0-dev

      - name: Install JS deps
        run: npm ci

      - name: Install Tauri CLI
        run: npm install -g @tauri-apps/cli@^2.0.0

      # Build frontend explicitly to ensure dist directory exists
      - name: Build frontend
        run: npm run build

      # Build the application
      - name: Build Tauri application
        run: |
          echo "Building Tauri application from $(pwd)"
          echo "Dist directory contents before Tauri build:"
          ls -la dist/
          
          echo "Tauri configuration check:"
          cat src-tauri/tauri.conf.json
          
          echo "Rust target check:"
          rustup target list --installed
          
          echo "Starting Tauri build..."
          # Capture build output for debugging
          if ! tauri build ${{ matrix.args }} 2>&1 | tee tauri-build.log; then
            echo "❌ Tauri build failed!"
            echo "Build log contents:"
            cat tauri-build.log
            echo "Checking what was created:"
            ls -la src-tauri/target/${{ matrix.target }}/release/ || echo "No release directory found"
            exit 1
          fi
          echo "✅ Tauri build completed successfully"
          
          echo "Checking build output:"
          # Check both possible locations for the bundle
          if [ -d "src-tauri/target/release/bundle" ]; then
            echo "Bundle directory found in target/release/bundle:"
            ls -la src-tauri/target/release/bundle/
          elif [ -d "src-tauri/target/${{ matrix.target }}/release/bundle" ]; then
            echo "Bundle directory found in target/${{ matrix.target }}/release/bundle:"
            ls -la src-tauri/target/${{ matrix.target }}/release/bundle/
          else
            echo "❌ Bundle directory not found in either location!"
            echo "Checking what exists:"
            ls -la src-tauri/target/ || echo "No target directory found"
          fi

      # Debug: Check icon files and build artifacts

      # Verify build artifacts exist
      - name: Verify build artifacts
        run: |
          # Check both possible bundle locations
          if [ -d "src-tauri/target/release/bundle" ]; then
            BUNDLE_PATH="src-tauri/target/release/bundle"
          elif [ -d "src-tauri/target/${{ matrix.target }}/release/bundle" ]; then
            BUNDLE_PATH="src-tauri/target/${{ matrix.target }}/release/bundle"
          else
            echo "❌ Bundle directory not found in either location"
            echo "Checking what exists:"
            ls -la src-tauri/target/ || echo "No target directory found"
            exit 1
          fi
          
          echo "Bundle directory contents:"
          ls -la "$BUNDLE_PATH"
          
          # Find the actual bundle subdirectory
          BUNDLE_SUBDIRS=$(find "$BUNDLE_PATH" -maxdepth 1 -type d | grep -v "^$BUNDLE_PATH$")
          if [ -n "$BUNDLE_SUBDIRS" ]; then
            BUNDLE_SUBDIR=$(echo "$BUNDLE_SUBDIRS" | head -n 1)
            echo "Found bundle subdirectory: $BUNDLE_SUBDIR"
            
            # Check for common bundle file types
            if [ "${{ matrix.platform }}" == "macos-latest" ]; then
              DMG_FILES=$(find "$BUNDLE_SUBDIR" -name "*.dmg" 2>/dev/null)
              if [ -n "$DMG_FILES" ]; then
                echo "✅ DMG files found:"
                echo "$DMG_FILES"
              else
                echo "❌ No DMG files found in $BUNDLE_SUBDIR"
                echo "Available files:"
                find "$BUNDLE_SUBDIR" -type f 2>/dev/null || echo "No files found"
                exit 1
              fi
            elif [ "${{ matrix.platform }}" == "ubuntu-22.04" ]; then
              APPIMAGE_FILES=$(find "$BUNDLE_SUBDIR" -name "*.AppImage" 2>/dev/null)
              if [ -n "$APPIMAGE_FILES" ]; then
                echo "✅ AppImage files found:"
                echo "$APPIMAGE_FILES"
              else
                echo "❌ No AppImage files found in $BUNDLE_SUBDIR"
                echo "Available files:"
                find "$BUNDLE_SUBDIR" -type f 2>/dev/null || echo "No files found"
                exit 1
              fi
            elif [ "${{ matrix.platform }}" == "windows-latest" ]; then
              EXE_FILES=$(find "$BUNDLE_SUBDIR" -name "*.exe" 2>/dev/null)
              if [ -n "$EXE_FILES" ]; then
                echo "✅ EXE files found:"
                echo "$EXE_FILES"
              else
                echo "❌ No EXE files found in $BUNDLE_SUBDIR"
                echo "Available files:"
                find "$BUNDLE_SUBDIR" -type f 2>/dev/null || echo "No files found"
                exit 1
              fi
            fi
          else
            echo "❌ No bundle subdirectory found in $BUNDLE_PATH"
            exit 1
          fi

      # Clean up temporary files to prevent upload conflicts
      - name: Clean up temporary files
        run: |
          BUNDLE_PATH="src-tauri/target/${{ matrix.target }}/release/bundle"
          echo "Cleaning up temporary files in $BUNDLE_PATH"
          
          # Remove temporary files that might interfere with uploads
          find "$BUNDLE_PATH" -name "*.DS_Store" -delete 2>/dev/null || true
          find "$BUNDLE_PATH" -name "bundle_*.sh" -delete 2>/dev/null || true
          find "$BUNDLE_PATH" -name "*.tmp" -delete 2>/dev/null || true
          
          echo "Cleanup completed"

      # Show files that will be uploaded
      - name: Show files to be uploaded
        run: |
          echo "Files that will be uploaded to the release:"
          echo "=== DMG files ==="
          find src-tauri/target/${{ matrix.target }}/release/bundle -name "*.dmg" 2>/dev/null || echo "No DMG files found"
          echo "=== AppImage files ==="
          find src-tauri/target/${{ matrix.target }}/release/bundle -name "*.AppImage" 2>/dev/null || echo "No AppImage files found"
          echo "=== EXE files ==="
          find src-tauri/target/${{ matrix.target }}/release/bundle -name "*.exe" 2>/dev/null || echo "No EXE files found"

      # Create or update GitHub Release
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          body: |
            See the assets below to download and install.
            
            ## Changes
            - Built with Tauri v2
            - Cross-platform support
          draft: true
          prerelease: false
          files: |
            src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg
            src-tauri/target/${{ matrix.target }}/release/bundle/appimage/*.AppImage
            src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload assets to the release
      - name: Upload assets to release
        run: |
          echo "Uploading assets to release..."
          
          # Check both possible bundle locations
          if [ -d "src-tauri/target/release/bundle" ]; then
            BUNDLE_PATH="src-tauri/target/release/bundle"
          elif [ -d "src-tauri/target/${{ matrix.target }}/release/bundle" ]; then
            BUNDLE_PATH="src-tauri/target/${{ matrix.target }}/release/bundle"
          else
            echo "❌ Bundle directory not found in either location"
            exit 1
          fi
          
          echo "Found bundle directory: $BUNDLE_PATH"
          
          # Find the actual bundle subdirectory
          BUNDLE_SUBDIR=$(find "$BUNDLE_PATH" -maxdepth 1 -type d | head -n 1)
          if [ -z "$BUNDLE_SUBDIR" ] || [ "$BUNDLE_SUBDIR" = "$BUNDLE_PATH" ]; then
            echo "❌ No bundle subdirectory found in $BUNDLE_PATH"
            exit 1
          fi
          
          echo "Found bundle subdirectory: $BUNDLE_SUBDIR"
          
          if [ "${{ matrix.platform }}" == "macos-latest" ]; then
            DMG_FILES=$(find "$BUNDLE_SUBDIR" -name "*.dmg" 2>/dev/null)
            if [ -n "$DMG_FILES" ]; then
              echo "Uploading DMG files: $DMG_FILES"
              for file in $DMG_FILES; do
                gh release upload ${{ github.ref_name }} "$file" \
                  --repo ${{ github.repository }} \
                  --clobber
              done
            else
              echo "❌ No DMG files found to upload"
              exit 1
            fi
          elif [ "${{ matrix.platform }}" == "ubuntu-22.04" ]; then
            APPIMAGE_FILES=$(find "$BUNDLE_SUBDIR" -name "*.AppImage" 2>/dev/null)
            if [ -n "$APPIMAGE_FILES" ]; then
              echo "Uploading AppImage files: $APPIMAGE_FILES"
              for file in $APPIMAGE_FILES; do
                gh release upload ${{ github.ref_name }} "$file" \
                  --repo ${{ github.repository }} \
                  --clobber
              done
            else
              echo "❌ No AppImage files found to upload"
              exit 1
            fi
          elif [ "${{ matrix.platform }}" == "windows-latest" ]; then
            EXE_FILES=$(find "$BUNDLE_SUBDIR" -name "*.exe" 2>/dev/null)
            if [ -n "$EXE_FILES" ]; then
              echo "Uploading EXE files: $EXE_FILES"
              for file in $EXE_FILES; do
                gh release upload ${{ github.ref_name }} "$file" \
                  --repo ${{ github.repository }} \
                  --clobber
              done
            else
              echo "❌ No EXE files found to upload"
              exit 1
            fi
          fi
