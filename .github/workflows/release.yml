name: release

on:
  # create a release when you push a version tag like v1.2.3
  push:
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-and-release:
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS: build separate binaries for Apple Silicon + Intel
          - platform: macos-latest
            target: aarch64-apple-darwin
            args: "--target aarch64-apple-darwin"
          - platform: macos-latest
            target: x86_64-apple-darwin
            args: "--target x86_64-apple-darwin"
          # Linux runner for AppImage/.deb (see notes about deps & glibc)
          - platform: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            args: ""
          # Windows .exe / NSIS installer
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
            args: ""

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: npm

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          # macOS needs both targets if you build a universal later
          targets: ${{ matrix.target }}

      - name: Cache Rust build artifacts
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri
          cache-on-failure: true

      - name: Install Linux dependencies
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          # Tauri v2 uses webkit2gtk 4.1
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf

      - name: Install JS deps
        run: npm ci

      - name: Install Tauri CLI
        run: npm install -g @tauri-apps/cli@^2.0.0

      # Build the application
      - name: Build Tauri application
        run: tauri build ${{ matrix.args }}

      # Create or update GitHub Release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
          body: |
            See the assets below to download and install.
            
            ## Changes
            - Built with Tauri v2
            - Cross-platform support
          draft: true
          prerelease: false

      # Upload macOS bundles
      - name: Upload macOS bundles
        if: matrix.platform == 'macos-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: src-tauri/target/${{ matrix.target }}/release/bundle/dmg/*.dmg
          asset_name: LocalReads_${{ github.ref_name }}_${{ matrix.target == 'aarch64-apple-darwin' && 'aarch64' || 'x64' }}.dmg
          asset_content_type: application/octet-stream

      # Upload Linux bundles
      - name: Upload Linux bundles
        if: matrix.platform == 'ubuntu-22.04'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: src-tauri/target/${{ matrix.target }}/release/bundle/appimage/*.AppImage
          asset_name: LocalReads_${{ github.ref_name }}_linux.AppImage
          asset_content_type: application/octet-stream

      # Upload Windows bundles
      - name: Upload Windows bundles
        if: matrix.platform == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: src-tauri/target/${{ matrix.target }}/release/bundle/nsis/*.exe
          asset_name: LocalReads_${{ github.ref_name }}_windows.exe
          asset_content_type: application/octet-stream
