name: release

on:
  # create a release when you push a version tag like v1.2.3
  push:
    tags:
      - "v*"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-and-release:
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS: build separate binaries for Apple Silicon + Intel
          - platform: macos-latest
            target: aarch64-apple-darwin
            args: "--target aarch64-apple-darwin"
          - platform: macos-latest
            target: x86_64-apple-darwin
            args: "--target x86_64-apple-darwin"
          # Linux runner for AppImage/.deb (see notes about deps & glibc)
          - platform: ubuntu-22.04
            target: x86_64-unknown-linux-gnu
            args: ""
          # Windows .exe / NSIS installer
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
            args: ""

    runs-on: ${{ matrix.platform }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: npm

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          # macOS needs both targets if you build a universal later
          targets: ${{ matrix.target }}

      - name: Install required Rust targets
        run: |
          rustup target add ${{ matrix.target }}
          rustup target list --installed

      - name: Cache Rust build artifacts
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri
          cache-on-failure: true

      - name: Install Linux dependencies
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          # Tauri v2 uses webkit2gtk 4.1
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf

      - name: Install JS deps
        run: npm ci

      - name: Install Tauri CLI
        run: npm install -g @tauri-apps/cli@^2.0.0

      # Build the application
      - name: Build Tauri application
        run: tauri build ${{ matrix.args }}

      # Copy frontend assets to app bundle (fixes Tauri v2 asset bundling issue)
      - name: Copy frontend assets to app bundle
        if: matrix.platform == 'macos-latest'
        run: |
          echo "Copying frontend assets to app bundle..."
          DIST_DIR="dist"
          BUNDLE_DIR="src-tauri/target/${{ matrix.target }}/release/bundle/macos/LocalReads.app/Contents/Resources"
          
          if [ -d "$DIST_DIR" ] && [ -d "$BUNDLE_DIR" ]; then
            cp -r $DIST_DIR/* $BUNDLE_DIR/
            echo "✅ Frontend assets copied successfully!"
            ls -la $BUNDLE_DIR/
          else
            echo "❌ Dist or bundle directory not found"
            exit 1
          fi

      # Copy frontend assets to app bundle for Linux
      - name: Copy frontend assets to app bundle (Linux)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          echo "Copying frontend assets to app bundle..."
          DIST_DIR="dist"
          BUNDLE_DIR="src-tauri/target/${{ matrix.target }}/release/bundle/appimage"
          
          if [ -d "$DIST_DIR" ] && [ -d "$BUNDLE_DIR" ]; then
            cp -r $DIST_DIR/* $BUNDLE_DIR/
            echo "✅ Frontend assets copied successfully!"
            ls -la $BUNDLE_DIR/
          else
            echo "❌ Dist or bundle directory not found"
            exit 1
          fi

      # Copy frontend assets to app bundle for Windows
      - name: Copy frontend assets to app bundle (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          echo "Copying frontend assets to app bundle..."
          DIST_DIR="dist"
          BUNDLE_DIR="src-tauri/target/${{ matrix.target }}/release/bundle/nsis"
          
          if [ -d "$DIST_DIR" ] && [ -d "$BUNDLE_DIR" ]; then
            Copy-Item -Path "$DIST_DIR\*" -Destination "$BUNDLE_DIR" -Recurse -Force
            echo "✅ Frontend assets copied successfully!"
            Get-ChildItem $BUNDLE_DIR
          else
            echo "❌ Dist or bundle directory not found"
            exit 1
          fi

      # List build artifacts for debugging
      - name: List build artifacts
        run: |
          echo "Build artifacts in src-tauri/target/${{ matrix.target }}/release/bundle/:"
          find src-tauri/target/${{ matrix.target }}/release/bundle/ -type f 2>/dev/null || echo "No bundle directory found"

      # Verify build artifacts exist
      - name: Verify build artifacts
        run: |
          BUNDLE_PATH="src-tauri/target/${{ matrix.target }}/release/bundle"
          if [ ! -d "$BUNDLE_PATH" ]; then
            echo "❌ Bundle directory not found: $BUNDLE_PATH"
            exit 1
          fi
          
          if [ "${{ matrix.platform }}" == "macos-latest" ]; then
            if [ -d "$BUNDLE_PATH/dmg" ] && [ "$(ls -A $BUNDLE_PATH/dmg/*.dmg 2>/dev/null)" ]; then
              echo "✅ DMG files found:"
              ls -la $BUNDLE_PATH/dmg/*.dmg
            else
              echo "❌ No DMG files found in $BUNDLE_PATH/dmg"
              exit 1
            fi
          elif [ "${{ matrix.platform }}" == "ubuntu-22.04" ]; then
            if [ -d "$BUNDLE_PATH/appimage" ] && [ "$(ls -A $BUNDLE_PATH/appimage/*.AppImage 2>/dev/null)" ]; then
              echo "✅ AppImage files found:"
              ls -la $BUNDLE_PATH/appimage/*.AppImage
            else
              echo "❌ No AppImage files found in $BUNDLE_PATH/appimage"
              exit 1
            fi
          elif [ "${{ matrix.platform }}" == "windows-latest" ]; then
            if [ -d "$BUNDLE_PATH/nsis" ] && [ "$(ls -A $BUNDLE_PATH/nsis/*.exe 2>/dev/null)" ]; then
              echo "✅ EXE files found:"
              ls -la $BUNDLE_PATH/nsis/*.exe
            else
              echo "❌ No EXE files found in $BUNDLE_PATH/nsis"
              exit 1
            fi
          fi

      # Create or update GitHub Release
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          body: |
            See the assets below to download and install.
            
            ## Changes
            - Built with Tauri v2
            - Cross-platform support
          draft: true
          prerelease: false
          files: |
            src-tauri/target/${{ matrix.target }}/release/bundle/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload macOS bundles with proper error handling
      - name: Upload macOS bundles
        if: matrix.platform == 'macos-latest'
        run: |
          DMG_PATH="src-tauri/target/${{ matrix.target }}/release/bundle/dmg"
          if [ -d "$DMG_PATH" ] && [ "$(ls -A $DMG_PATH/*.dmg 2>/dev/null)" ]; then
            echo "Found DMG files, uploading to release..."
            gh release upload ${{ github.ref_name }} $DMG_PATH/*.dmg \
              --repo ${{ github.repository }} \
              --clobber
          else
            echo "No DMG files found in $DMG_PATH"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload Linux bundles with proper error handling
      - name: Upload Linux bundles
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          APPIMAGE_PATH="src-tauri/target/${{ matrix.target }}/release/bundle/appimage"
          if [ -d "$APPIMAGE_PATH" ] && [ "$(ls -A $APPIMAGE_PATH/*.AppImage 2>/dev/null)" ]; then
            echo "Found AppImage files, uploading to release..."
            gh release upload ${{ github.ref_name }} $APPIMAGE_PATH/*.AppImage \
              --repo ${{ github.repository }} \
              --clobber
          else
            echo "No AppImage files found in $APPIMAGE_PATH"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Upload Windows bundles with proper error handling
      - name: Upload Windows bundles
        if: matrix.platform == 'windows-latest'
        run: |
          NSIS_PATH="src-tauri/target/${{ matrix.target }}/release/bundle/nsis"
          if [ -d "$NSIS_PATH" ] && [ "$(ls -A $NSIS_PATH/*.exe 2>/dev/null)" ]; then
            echo "Found EXE files, uploading to release..."
            gh release upload ${{ github.ref_name }} $NSIS_PATH/*.exe \
              --repo ${{ github.repository }} \
              --clobber
          else
            echo "No EXE files found in $NSIS_PATH"
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
